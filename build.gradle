import java.text.SimpleDateFormat

plugins {
	id 'java-library'
	id 'jacoco'
	id 'eclipse'
	id 'idea'
	id 'org.springframework.boot' version '2.3.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
}


def buildTime() {
	def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'") // you can change it
	df.setTimeZone(TimeZone.getTimeZone("UTC"))
	return df.format(new Date())
}

allprojects {

	wrapper {
		project.ext."buildDate" = buildTime()
	}

	apply plugin: 'java'

	group 'com.firabarcelona'
	version "${applicationServiceAppVersion}"

	java {
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
		disableAutoTargetJvm()
	}

	repositories {
		maven {
			credentials {
				username = nexusUsername
				password = nexusPassword
			}
			url "https://nexus.cwsfirabarcelona.com/repository/maven-public/"
		}
		mavenCentral()
	}

	configurations.all {
		resolutionStrategy {
			cacheChangingModulesFor 0, 'seconds'
		}
	}
}

ext {
	set('springCloudVersion', "Hoxton.SR8")
}

dependencies {
	api platform("com.firabarcelona:api-core-platform:${firaApiCoreVersion}")
	implementation ("com.firabarcelona:api-core") {
		exclude module: 'api-core-mail'
		exclude module: 'api-core-amazon-sqs'
		exclude module: 'api-core-amazon-simpledb'
	}
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	runtimeOnly 'mysql:mysql-connector-java'
//	delete when database will be configured
	compile group: 'com.h2database', name: 'h2', version: '1.4.197'

	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'

	testCompile group: 'org.mockito', name: 'mockito-core', version: '3.2.4'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
	dependsOn test
	reports {
		html.enabled = true
		xml.enabled = true
		csv.enabled = false
	}
}

bootRun {
	String activeProfile =  System.properties['spring.profiles.active']
	systemProperty "spring.profiles.active", activeProfile
}

springBoot {
	mainClassName = "com.firabarcelona.Application"
}

tasks.withType(JavaCompile) {
	options.compilerArgs << '-Xlint:deprecation'
	options.deprecation = true
	options.warnings = true
}

processResources {
	filesMatching('**/*.properties') { expand(project.properties) }
}
