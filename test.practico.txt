Preguntas:

1. Como es tu día a día en el proyecto
 1.1 - Stack que utilizas: backend/ frontend 	
 1.2 - ¿Qué metodologís utilizáis para gestioanr el equipo?¿Ágiles?
 1.3 - ¿Eliges la tarjeta o te la asignan?

2. ¿Qué versiones de Java conoces? 7, 8 y 10

3. Diferencia entre Lazy vs Eagger
  Bucle
  
  
Lazy loading carga los datos asociados a una entidad solo cuando son necesarios, mejorando el rendimiento inicial pero potencialmente causando excepciones. Eager loading carga inmediatamente todos los datos asociados, evitando excepciones pero generando consultas innecesarias, y la elección depende de la naturaleza de la relación y los requisitos de rendimiento.

4. ¿Qué tipos de Projections conoces? Spring Data Rest Proyecciones de Interfaz y Proyecciones de DTO la de DTO es la que mas use
5. ¿Qué significa que una clase o método tenga @Transactional?

Imagina que estás realizando varias acciones en tu aplicación, como guardar datos en una base de datos. Ahora, si algo sale mal durante esas acciones, como si se produce un error, ¿preferirías que todo volviera a estar como estaba antes o quedarte en un estado inconsistente?

Bueno, la anotación @Transactional en Java, especialmente cuando usas Spring, es como decirle a tu aplicación que agrupe todas esas acciones en una "transacción". Esto significa que todas esas cosas que estás haciendo suceden como una unidad única. Si todo va bien, genial. Pero si algo sale mal en el camino, la transacción se cancela y todo vuelve al estado que tenía antes de comenzar, para que tu aplicación no quede en un estado extraño e inconsistente. Es una especie de seguro para tus operaciones, asegurándose de que todo esté en orden incluso si algo va mal.

   5.1 -Si quieres que las consultas sean de de solo lectura, ¿Cómo lo configurarías?
   Se puede utilizar la propiedad readOnly de la anotación @Transactional para indicar que la transacción es de solo lectura.
   Depende del proyecto se puede configurar en la clase java o en el xml asociado.



Práctica

1.	Crear una entidad Person con sus anotaciones
        Añadir variable id como clave primaria
        Añadir variable string name
        Getters/Setters , etc.
		
2.  Crear un service PersonService. Tipo interface. Tenga un método llamado getListByName, que reciba como parámetro un string name y devuelva una collection/list/etc
    3.1 crear clase que implemente PersonService (PersonServiceImpl)

3. Crear un repositorio para la entidad Person
  3.1 - Crear un método utilizando JPA, que obtenga una lista de Person buscando por name

4. Implementar en PersonServiceImpl el método getListByName, accediendo al repositorio PersonRepository creado en el punto 3.

5. Implementar en el test PersonServiceImplTest el método getListByName

6. Crear otro método en PersonServiceImpl que obtenga una colection/list/etc. de id's utilizando una lambda/stream.

7. Crear un controller que reciba como parámetro en la url un string. Este controller debe llamar al PersonService.getListByName

8. Implementa el test del controller

9. Sube a git los cambios, explicando en el commit el trabajo realizado

EB1 - Añade al gitignore los ficheros de *.log
EB2 - Proyecto que compile



